<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_305439_digital_m.LoadParticipants</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>LoadParticipants</name>
        <script><![CDATA[var LoadParticipants = Class.create();
LoadParticipants.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	triggerLoadParticipants: function (){
		try{
			gs.info("trigger triggerLoadParticipants");
			load("application");
			load("partner");
		} catch (e){
			gs.error("Failed to reload the participants table. " + e.message);
		}
	},
    type: 'LoadParticipants'
});

function load(participantType){
	var partUtil = new ParticipantsUtil();
	var participantPlural = partUtil.plural(participantType);
	
	populateParticipants(getCgParticipants(participantPlural), participantType, participantPlural);
}

function populateParticipants(jsonObject, participantType, participantTypePlural){
	var dbObjects = getAllDbRecords(participantType);
	var responsePartIds = {};
	jsonObject.data.forEach(function(participant){
		var businessId = participant.businessId;
		var name = participant[participantTypePlural].name;
		responsePartIds[businessId] = businessId;
		
		if(businessId in dbObjects){
			// update the participant if needed
			var db_participant_name = dbObjects[businessId].participant_name;
			gs.info("db_participant_name="+db_participant_name);
			if (db_participant_name != name){
				var g_record = new GlideRecord("x_305439_digital_m_participants");
				g_record.addQuery("cg_id", businessId);
				g_record.query();
				g_record.next();
				g_record.setValue("participant_name", name);
				g_record.update();
			}
		} else {
			// add the new participant
			var g_record_new = new GlideRecord("x_305439_digital_m_participants");
			g_record_new.initialize();
			g_record_new.setValue("cg_id", businessId);
			g_record_new.setValue("participant_name", name);
			g_record_new.setValue("type", participantType);
			if(participantType == "application"){
				g_record_new.setValue("application_type", participant[participantTypePlural].productTypes[0]);
				g_record_new.setValue("cg_product_id", participant[participantTypePlural].products[0].businessId);
			} else {
				g_record_new.setValue("cg_product_id", businessId);
			}
			g_record_new.insert();
		}
	});
	
	// clean up missing participants in CG.
	Object.keys(dbObjects).forEach(function(businessId) {
		if(!(businessId in responsePartIds)){
			var g_record = new GlideRecord("x_305439_digital_m_participants");
			g_record.addQuery("cg_id", businessId);
			g_record.query();
			g_record.next();
			g_record.deleteRecord();
		}
	});
}

function getAllDbRecords(participantType){
	var g_record = new GlideRecord("x_305439_digital_m_participants");
	g_record.addQuery("type", participantType);
	g_record.query();
	var mapRecords = {};
	while(g_record.next()){
		mapRecords[g_record.cg_id] = getObject(g_record);
	}
	return mapRecords;
}

function getObject(g_record){
	var obj = {};
	obj.application_type = g_record.application_type + "";
	obj.cg_id = g_record.cg_id + "";
	obj.cg_product_id = g_record.cg_product_id + "";
	obj.participant_name = g_record.participant_name + "";
	obj.type = g_record.type + "";
	return obj;
}

function getCgParticipants(type){
	try { 
		var r = new sn_ws.RESTMessageV2('x_305439_digital_m.AMFT-Participants', 'GET All');
		new ConnectionSettings().setMandatoryProps(r);
		r.setStringParameterNoEscape('participant_type', type);
		
		var response = r.execute();
		var responseBody = response.getBody();
		var httpStatus = response.getStatusCode();
		if(httpStatus != 200){
			gs.error("failed to get all " + type + " HTTP status: " + httpStatus);
			return;
		}
		var jsonObj = JSON.parse(responseBody);
		return jsonObj;
	}
	catch(ex) {
	 var message = ex.message;
		gs.error(message);
	}
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-21 14:54:15</sys_created_on>
        <sys_id>06e119064f1073002f86b5e18110c7b7</sys_id>
        <sys_mod_count>33</sys_mod_count>
        <sys_name>LoadParticipants</sys_name>
        <sys_package display_value="digital-mft" source="x_305439_digital_m">3006e9b44f2323002f86b5e18110c7cd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="digital-mft">3006e9b44f2323002f86b5e18110c7cd</sys_scope>
        <sys_update_name>sys_script_include_06e119064f1073002f86b5e18110c7b7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-05 14:31:49</sys_updated_on>
    </sys_script_include>
</record_update>
