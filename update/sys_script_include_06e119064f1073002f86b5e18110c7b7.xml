<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_305439_digital_m.LoadParticipants</api_name>
        <client_callable>true</client_callable>
        <description/>
        <name>LoadParticipants</name>
        <script><![CDATA[var LoadParticipants = Class.create();
LoadParticipants.prototype = Object.extendsObject(global.AbstractAjaxProcessor, {
	
	triggerLoadParticipants: function (){
		try{
			gs.info("trigger triggerLoadParticipants");
			load("application");
			load("partner");
		} catch (e){
			gs.error("Failed to reload the participants table. " + e.message);
		}
	},
    type: 'LoadParticipants'
});

function load(participantType){
	var partUtil = new ParticipantsUtil();
			
	var loadedParticipantCount = partUtil.getParticipantsCount(participantType);
	var participantPlural = partUtil.plural(participantType);
	
	// there is no participants from this type into the DB. Load everything returned from CG.
	if(loadedParticipantCount == 0){
		populateTable(getCgParticipants(participantPlural), {}, participantType, participantPlural);
	} else {
		var expiredApplications = partUtil.getExpiredParticipants(participantType);
		var expiredAppCount = Object.keys(expiredApplications).length;
		gs.info("expired participant count: " + expiredAppCount);
		// update expired participants
		if(expiredAppCount > 0){
			populateTable(getCgParticipants(participantPlural), expiredApplications, participantType, participantPlural);
		} else {
			var part = getCgParticipants(participantPlural).data.length;
			gs.info("total partners: " + part);
			if (loadedParticipantCount < part){
				populateTable(getCgParticipants(participantPlural), {}, participantType, participantPlural);
			}
		}
	}
}

function populateTable(jsonObj, expiredParticipants, partType, partTypePlural){
	jsonObj.data.forEach(function(element) {
		var businessId = element.businessId;
		var name = element[partTypePlural].name;
		gs.info("fetched " + partType + " from CG with name=" + name + ", businessID=" + businessId);

		// if participant value is expired in the DB update it
		if(expiredParticipants.hasOwnProperty(businessId)){
			var g_record = new GlideRecord("x_305439_digital_m_participants");
			g_record.get("cg_id", businessId);
			
			g_record.setValue("participant_name", name);
			g_record.setValue("type", partType);
			g_record.setValue("sys_updated_on", new GlideDateTime());
			
			if(partType == "application"){
				g_record.setValue("application_type", element[partTypePlural].productTypes[0]);
				g_record.setValue("cg_product_id", element[partTypePlural].products[0].businessId);
			}
			
			var updated = g_record.update("Updating participant.");
			delete expiredParticipants[businessId];
		} else {
			// add the new values retrieved from Central Governance
			gs.info("trying to add entry with name " + name + ", id=" + businessId);
			var new_record = new GlideRecord("x_305439_digital_m_participants");
			new_record.get("cg_id", businessId);
			if(!new_record.next()){
				new_record.initialize();
				new_record.setValue("cg_id", businessId);
				new_record.setValue("participant_name", name);
				new_record.setValue("type", partType);
				if(partType == "application"){
					new_record.setValue("application_type", element[partTypePlural].productTypes[0]);
					new_record.setValue("cg_product_id", element[partTypePlural].products[0].businessId);
				}
				new_record.insert();
			}
		}
	});
}

function getCgParticipants(type){
	try { 
		var r = new sn_ws.RESTMessageV2('x_305439_digital_m.AMFT-Participants', 'GET All');
		new ConnectionSettings().setMandatoryProps(r);
		r.setStringParameterNoEscape('participant_type', type);
		
		var response = r.execute();
		var responseBody = response.getBody();
		var httpStatus = response.getStatusCode();
		if(httpStatus != 200){
			gs.error("failed to get all " + type + " HTTP status: " + httpStatus);
			return;
		}
		var jsonObj = JSON.parse(responseBody);
		return jsonObj;
	}
	catch(ex) {
	 var message = ex.message;
		gs.error(message);
	}
}]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-21 14:54:15</sys_created_on>
        <sys_id>06e119064f1073002f86b5e18110c7b7</sys_id>
        <sys_mod_count>22</sys_mod_count>
        <sys_name>LoadParticipants</sys_name>
        <sys_package display_value="digital-mft" source="x_305439_digital_m">3006e9b44f2323002f86b5e18110c7cd</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="digital-mft">3006e9b44f2323002f86b5e18110c7cd</sys_scope>
        <sys_update_name>sys_script_include_06e119064f1073002f86b5e18110c7b7</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-05-10 10:25:06</sys_updated_on>
    </sys_script_include>
</record_update>
