<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>ecc_queue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="ecc_queue">state=ready^agent_correlatorSTARTSWITHDeploy status^queue=input^EQ<item endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="ready"/>
            <item endquery="false" field="agent_correlator" goto="false" newquery="false" operator="STARTSWITH" or="false" value="Deploy status"/>
            <item endquery="false" field="queue" goto="false" newquery="false" operator="=" or="false" value="input"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Sensor Deploy Status</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here
	try{
		
			
	var flowRecord = getFlowRec(current.agent_correlator);
	var xmlDoc = new XMLDocument2();
	xmlDoc.parseXML(current.payload);
	var responseBody = xmlDoc.getNodeText("//result/output");
	var response = JSON.parse(responseBody);
	
	gs.info("[Sensor Deploy Status] response.status={0}", response.status);
	
	if(response.status == "200"){
		if(response.data.length > 0){
			gs.debug("status= " + response.data[0].flows.status.code);
			if(!gs.nil(flowRecord)){
				flowRecord.setValue("cg_status", response.data[0].flows.status.code);
				flowRecord.update();
			}
		} else {
			gs.debug("[Sensor Deploy Status] empty array of results has been returned.");
		}
		
	} else {
		gs.error("[Sensor Deploy Status] cannot get the deploy status.");
	}
	}catch(ex){
		gs.error("[Sensor Deploy Status] cannot get the deploy status." + ex.message);
	}
})(current, previous);

function getFlowRec(correlator){
	if(!gs.nil(correlator)){
		var idIndex = correlator.indexOf("-") + 1;
		var sys_id = correlator.slice(idIndex);
		var flowRecord = new GlideRecord("x_305439_digital_m_flow_settings");
		if(flowRecord.get(sys_id)){
			return flowRecord;
		}
	} else {
		gs.error("[Sensor Deploy Status] Cannot extract the flow id from the correlator={0}", correlator);
	}
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-06-13 09:46:06</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ecb695cd4fca7f402f86b5e18110c7e8</sys_id>
        <sys_mod_count>13</sys_mod_count>
        <sys_name>Sensor Deploy Status</sys_name>
        <sys_overrides/>
        <sys_package display_value="digital-mft" source="x_305439_digital_m">3006e9b44f2323002f86b5e18110c7cd</sys_package>
        <sys_policy/>
        <sys_scope display_value="digital-mft">3006e9b44f2323002f86b5e18110c7cd</sys_scope>
        <sys_update_name>sys_script_ecb695cd4fca7f402f86b5e18110c7e8</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-18 12:18:22</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ecb695cd4fca7f402f86b5e18110c7e8"/>
</record_update>
