<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_ui_action">
    <sys_ui_action action="INSERT_OR_UPDATE">
        <action_name>sysverb_update</action_name>
        <active>true</active>
        <client>false</client>
        <client_script_v2/>
        <comments/>
        <condition>current.isValidRecord() &amp;&amp; current.canWrite() </condition>
        <form_action>true</form_action>
        <form_button>true</form_button>
        <form_button_v2>false</form_button_v2>
        <form_context_menu>false</form_context_menu>
        <form_link>false</form_link>
        <form_menu_button_v2>false</form_menu_button_v2>
        <form_style/>
        <hint/>
        <isolate_script>false</isolate_script>
        <list_action>false</list_action>
        <list_banner_button>false</list_banner_button>
        <list_button>false</list_button>
        <list_choice>false</list_choice>
        <list_context_menu>false</list_context_menu>
        <list_link>false</list_link>
        <list_save_with_form_button>false</list_save_with_form_button>
        <list_style/>
        <name>Save</name>
        <onclick/>
        <order>50</order>
        <script><![CDATA[// gs.action.getGlideURI().getMap().get('URL Parameter Name');
//gs.info("action.URI: " + gs.action.getGlideURI().getMap());
//createServerProfile();

var scope = gs.getCurrentScopeName();
var table_prefix = current.getTableName();

try{
	createFlowSpecificSettings();
	createServerSpecificSettings();
// 	createClientSpecificSettings();
	current.update();
	
	gs.info("triggering update on communication profiles.");
	gs.eventQueue("x_305439_digital_m.update_comprofiles", current, "hello", gs.getUserName());
	
	var flowHelper = new FlowUtils();
	var body = flowHelper.getRequestBody(current);
	gs.info("Update request body: " + body);
	
	//updateFlow();
} catch (ex){
	gs.error(ex.message);
}



function createClientProfile(){
	var utils = new CommProfilesUtils();
	var profile = utils.getClientProfileSn(current);
	var serverProfile = utils.getServerProfileSn(current);
	
	if(serverProfile.nil()){
		gs.addErrorMessage("Please specify communication server settings.");
	}
	
	if(profile.nil()){
		// create new profile
		
// 		var commLink = new GlideRecord('x_305439_digital_m_communication_links');
// 		commLink.initialize();
// 		commLink.setValue("cg_client_profile_id", profiles[0].link.client.communication_profile_businessId);
// 		commLink.setValue("cg_server_profile_id", profiles[0].link.server.communication_profile_businessId);
// 		commLink.setValue("client", current.source);
// 		commLink.setValue("server", current.destination);
// 		commLink.setValue("name", profiles[0].pattern.pattern_data.name);
// 		setNewClient(current, profiles[0].link.client.communication_profile, commLink);
// 		var linkId = commLink.insert();
// 		var client_profile = getClientProfile();
// 		current.setValue(client_profile, linkId);
// 		current.update();
		
// 		var profileSettings = utils.getClientProfileSettingsSn(profile, current.flow_model_name);
	}
	
}

function createServerSpecificSettings(){
		
	var server;
	if(gs.getUser().hasRole("x_305439_digital_m.app_sender")){
		server = "server_profile_1";
	} else {
		server = "server_profile_2";
	}

	var port_field = table_prefix + "." + server + ".port";
	var srv_obj = current.getValue(server);
	
	if (gs.nil(srv_obj)){
		var relay = new GetStRelay();
		var r = new GlideRecord(scope + '_server_comm_profiles');
		r.initialize();
		r.setValue("host", relay.getStHost());
		r.setValue("port", RP.getParameterValue(port_field));
		var serverId = r.insert();
		current.setValue(server, serverId);
	}
}

function createFlowSpecificSettings(){
	
	if(current.flow_model_name == "APP_CFT_PESIT_PUSH_ST_SFTP_PULL_PARTNER"){
		var sftp_transfer_mode_field = table_prefix + ".model_0023.sftp_transfer_mode";
		var relay_receive_file_as_field = table_prefix + ".model_0023.relay_receive_file_as";
		var maximum_record_length_field = table_prefix + ".model_0023.maximum_record_length";
		var flow_identifier_field = table_prefix + ".model_0023.flow_identifier";
		var file_record_format_field = table_prefix + ".model_0023.file_record_format";
		var source_file_type_field = table_prefix + ".model_0023.source_file_type";
		var dest_folder_field = table_prefix + ".model_0023.destination_folder";
		var dest_file_field = table_prefix + ".model_0023.destination_file";
		var pesit_flow_idf_field = table_prefix + ".model_0023.pesit_flow_idf";

		if (current.model_0023.nil()){
			var r = new GlideRecord(scope + '_app_cft_pesit_push_st_sftp_pull_partner');
			r.initialize();
			r.setValue("sftp_transfer_mode", RP.getParameterValue(sftp_transfer_mode_field));
			r.setValue("relay_receive_file_as", RP.getParameterValue(relay_receive_file_as_field));
			r.setValue("maximum_record_length", RP.getParameterValue(maximum_record_length_field));
			r.setValue("flow_identifier", RP.getParameterValue(flow_identifier_field));
			r.setValue("file_record_format", RP.getParameterValue(file_record_format_field));
			r.setValue("source_file_type", RP.getParameterValue(source_file_type_field));
			r.setValue("destination_folder", RP.getParameterValue(dest_folder_field));
			r.setValue("destination_file", RP.getParameterValue(dest_file_field));
			r.setValue("destination_file", RP.getParameterValue(dest_file_field));
			r.setValue("pesit_flow_idf", RP.getParameterValue(pesit_flow_idf_field));
			
			var _0023_id = r.insert();
			current.setValue("model_0023", _0023_id);
		}
	} else if (current.flow_model_name == "PARTNER_SFTP_PUSH_ST_SFTP_PULL_PARTNER"){
		var src_transfer_type_field = table_prefix + ".model_0043.src_transfer_type";
		var target_transfer_type_field = table_prefix + ".model_0043.target_transfer_type";
		var destination_folder_field = table_prefix + ".model_0043.destination_folder";
		var destination_file_field = table_prefix + ".model_0043.destination_file";
		
		if(current.model_0043.nil()){
			var gr = new GlideRecord(scope + '_partner_sftp_push_st_sftp_pull_partner');
			gr.initialize();
			gr.setValue("src_transfer_type", RP.getParameterValue(src_transfer_type_field));
			gr.setValue("target_transfer_type", RP.getParameterValue(target_transfer_type_field));
			gr.setValue("destination_folder", RP.getParameterValue(destination_folder_field));
			gr.setValue("destination_file", RP.getParameterValue(destination_file_field));
			var _0043_id = gr.insert();
			current.setValue("model_0043", _0043_id);
		}
	}
}

function updateFlow(){	
	 try {
		 var flowHelper = new FlowUtils();
		 var r = new sn_ws.RESTMessageV2('x_305439_digital_m.AMFT-Flows', 'Update a flow');
		 r.setStringParameterNoEscape('businessId', current.cg_id);
		 r.setStringParameterNoEscape('flow_model_name', current.flow_model_name);
		 r.setRequestBody(flowHelper.getRequestBody(current));

		 var response = r.execute();
		 var responseBody = response.getBody();
		 var httpStatus = response.getStatusCode();
		 if (httpStatus == 200){
			 var responseBodyObj = JSON.parse(responseBody);
			 current.setValue("cg_status", responseBodyObj.data.statusFlow.code);
			 current.update();
			 gs.addInfoMessage("Successfully updated '" + current.flow_name + "'.");
		 } else {
			 gs.addErrorMessage("Failed update '" + current.flow_name + "' on CG site.");
		 }
		}
		catch(ex) {
			var message = ex.message;
			gs.error(message);
			gs.addErrorMessage("Failed update '" + current.flow_name + "' on CG site.");
		}
}

function createServerProfile(){
	try{
	var table_prefix = current.getTableName();
	var scope = gs.getCurrentScopeName();
	
	var host_field = table_prefix + ".server_profile.host";
	var port_field = table_prefix + ".server_profile.port";
	var credentials_field = table_prefix + ".server_profile.credentials";
	
	var host = RP.getParameterValue(host_field);
	var port = RP.getParameterValue(port_field);
	var credentials = RP.getParameterValue(credentials_field);
	
	gs.info("reference host: " + RP.getParameterValue(host));
	gs.info("reference: [" + current.server_profile + "]");
	if(current.server_profile == ""){
		if(current.flow_model_name == "APP_CFT_PESIT_PUSH_ST_SFTP_PULL_PARTNER"){
			// create comprofile
		} else if (current.flow_model_name == "PARTNER_SFTP_PUSH_ST_SFTP_PULL_PARTNER"){
			// create comprofile
		}
		
		var gr = new GlideRecord(scope + '_server_comm_profiles');
			gr.initialize();
			gr.setValue("host", host);
			gr.setValue("port", port);
			gr.setValue("credentials", credentials);
			gr.setValue("cg_id", "1");
		var id = gr.insert();
		
		current.server_profile = id;
	}
	}catch (ex){
		var message = ex.message;
		gs.error(message);
	}
}]]></script>
        <show_insert>false</show_insert>
        <show_multiple_update>false</show_multiple_update>
        <show_query>false</show_query>
        <show_update>true</show_update>
        <sys_class_name>sys_ui_action</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-03-12 15:34:21</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>431a27034f0433002f86b5e18110c797</sys_id>
        <sys_mod_count>88</sys_mod_count>
        <sys_name>Save</sys_name>
        <sys_overrides display_value="Save">42e780d40a0a0b34007e0d4a52d33405</sys_overrides>
        <sys_package display_value="digital-mft" source="x_305439_digital_m">3006e9b44f2323002f86b5e18110c7cd</sys_package>
        <sys_policy/>
        <sys_scope display_value="digital-mft">3006e9b44f2323002f86b5e18110c7cd</sys_scope>
        <sys_update_name>sys_ui_action_431a27034f0433002f86b5e18110c797</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-04-24 13:29:35</sys_updated_on>
        <table>x_305439_digital_m_flow_settings</table>
        <ui11_compatible>false</ui11_compatible>
        <ui16_compatible>false</ui16_compatible>
    </sys_ui_action>
</record_update>
