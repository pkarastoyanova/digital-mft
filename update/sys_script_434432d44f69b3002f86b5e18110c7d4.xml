<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>false</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>ecc_queue</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="ecc_queue">queue=input^state=ready^agent_correlatorSTARTSWITHCreate PESIT Server^ORagent_correlatorSTARTSWITHCreate SFTP Server^ORagent_correlatorSTARTSWITHUpdate PESIT Server^ORagent_correlatorSTARTSWITHUpdate SFTP Server^EQ<item endquery="false" field="queue" goto="false" newquery="false" operator="=" or="false" value="input"/>
            <item endquery="false" field="state" goto="false" newquery="false" operator="=" or="false" value="ready"/>
            <item endquery="false" field="agent_correlator" goto="false" newquery="false" operator="STARTSWITH" or="false" value="Create PESIT Server"/>
            <item endquery="false" field="agent_correlator" goto="false" newquery="false" operator="STARTSWITH" or="true" value="Create SFTP Server"/>
            <item endquery="false" field="agent_correlator" goto="false" newquery="false" operator="STARTSWITH" or="true" value="Update PESIT Server"/>
            <item endquery="false" field="agent_correlator" goto="false" newquery="false" operator="STARTSWITH" or="true" value="Update SFTP Server"/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>Sensor Server Create</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	// Add your code here
	try{
		var xmlDoc = new XMLDocument2();
		xmlDoc.parseXML(current.payload);
		var responseBody = xmlDoc.getNodeText("//result/output");
		var response = JSON.parse(responseBody);
		var flowRecord = getFlowRecord(current.agent_correlator);
		var flowUtils = new FlowUtils();
		
		var isUpdateOperation = isUpdate(current.agent_correlator);
		var operationName = getOperationName(current.agent_correlator);

		if(response.status != "201" && response.status != "200"){
			gs.error("[Sensor Server Profile] " + responseBody);
			flowUtils.addJournalEntry(flowRecord, "Failed to {0} server communication profile. {1}", operationName, response.errors);
		} else {
			gs.info("[Sensor Server Profile] Server communication profile was successfully {0}d.", operationName);
			if(isUpdateOperation){
				flowUtils.addJournalEntry(flowRecord, "Successfully {0}d server communication profile.", operationName);
				return;
			}
			var comprofile = response.data.communication_profile;
			gs.debug("[Sensor Server Profile] Server commprofile={0}", JSON.stringify(comprofile));
			var serverRecord = new GlideRecord("x_305439_digital_m_server_comm_profiles");
			serverRecord.addQuery("name", comprofile.name);
			serverRecord.query();
			if(serverRecord.next()){
				serverRecord.setValue("cg_id", response.data.businessId);
				serverRecord.setValue("cg_product_id", response.data.participant_businessId);
				serverRecord.setValue("protocol", comprofile.protocol);
				serverRecord.setValue("port", comprofile.port);
				serverRecord.setValue("host", comprofile.hosts[0]);
				if(!gs.nil(comprofile.certificateAlias)){
					serverRecord.setValue("certificate_alias", comprofile.certificateAlias);
				} else {
					serverRecord.setValue("login_key_alias", comprofile.keyAlias);
				}
				serverRecord.update();
				flowUtils.addJournalEntry(flowRecord, "Successfully created server communication profile.");
				
				setClientRecord(current.agent_correlator + "", response.data.businessId);
			} else {
				gs.debug("[Sensor Server Profile] Server commprofile with name={0} is not found. The profile will not be updated.", comprofile.name);
			}
		}
	} catch (ex){
		flowUtils.addJournalEntry(flowRecord, "Failed to create server communication profile.");
		gs.error("[Sensor Server Profile] Failed to create server communication profile. " + ex.message);
	}

})(current, previous);

function isUpdate(correlator){
	if(correlator.startsWith("Update")){
		return true;
	} 
	return false;
}

function getOperationName(correlator){
	if(correlator.startsWith("Update")){
		return "update";
	}
	return "create";
}

function getCommLinkId(correlator){
	if(!gs.nil(correlator)){
		var idIndex = correlator.indexOf("-") + 1;
		return correlator.slice(idIndex);
	} else {
		gs.error("[Sensor Server Profile] Cannot extract the client communication id from the correlator={0}", correlator);
	}
}

function setClientRecord(correlator, server_profile_id){
	var sys_id = getCommLinkId(correlator);
	var clientRecord = new GlideRecord("x_305439_digital_m_communication_links");
	var found = clientRecord.get(sys_id);
	if(found){
		clientRecord.setValue("cg_server_comprofile_id", server_profile_id);
		clientRecord.update();
	}
}

function getFlowRecord(correlator){
	var sys_id = getCommLinkId(correlator);
	
	var flowRecord = new GlideRecord("x_305439_digital_m_flow_settings");
	var query = flowRecord.addQuery("client_profile_1", sys_id);
	query.addOrCondition("client_profile_2", sys_id);
	flowRecord.query();
	if(flowRecord.next()){
		return flowRecord;
	} else {
		gs.error("[Sensor Server Profile] Cannot find the flow settings to which this client profile belongs to.");
	}
}]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2019-05-17 12:09:43</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>434432d44f69b3002f86b5e18110c7d4</sys_id>
        <sys_mod_count>32</sys_mod_count>
        <sys_name>Sensor Server Create</sys_name>
        <sys_overrides/>
        <sys_package display_value="digital-mft" source="x_305439_digital_m">3006e9b44f2323002f86b5e18110c7cd</sys_package>
        <sys_policy/>
        <sys_scope display_value="digital-mft">3006e9b44f2323002f86b5e18110c7cd</sys_scope>
        <sys_update_name>sys_script_434432d44f69b3002f86b5e18110c7d4</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2019-06-07 12:47:40</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=434432d44f69b3002f86b5e18110c7d4"/>
</record_update>
